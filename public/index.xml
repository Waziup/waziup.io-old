<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WAZIUP Platform</title>
    <link>/index.xml</link>
    <description>Recent content on WAZIUP Platform</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 28 Oct 2017 09:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contact</title>
      <link>/contact</link>
      <pubDate>Sat, 28 Oct 2017 09:00:00 +0000</pubDate>
      
      <guid>/contact</guid>
      <description>

&lt;p&gt;Waziup is being developped by the WAZIUP consortium.
Project website: www.waziup.eu&lt;/p&gt;

&lt;h2 id=&#34;community&#34;&gt;Community&lt;/h2&gt;

&lt;p&gt;Join the &lt;a href=&#34;./resources/community/&#34;&gt;Waziup community&lt;/a&gt; to make Waziup even better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Support</title>
      <link>/support</link>
      <pubDate>Sat, 28 Oct 2017 09:00:00 +0000</pubDate>
      
      <guid>/support</guid>
      <description>

&lt;p&gt;Waziup is actively developed by the Waziup consortium. Licence is&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;community-support&#34;&gt;Community support&lt;/h2&gt;

&lt;p&gt;If you have a question about Waziup, please check the &lt;a href=&#34;./documentation/using-waziup&#34;&gt;Waziup documentation&lt;/a&gt; first  - we&amp;rsquo;re always adding new resources, tutorials and examples.&lt;/p&gt;

&lt;h4 id=&#34;bug-reports&#34;&gt;Bug reports&lt;/h4&gt;

&lt;p&gt;If you found a bug, please report it! &lt;a href=&#34;https://github.com/waziup/platform/issues&#34;&gt;Create an issue on GitHub&lt;/a&gt; and provide as much info as you can.&lt;/p&gt;

&lt;h4 id=&#34;twitter-facebook&#34;&gt;Twitter &amp;amp; Facebook&lt;/h4&gt;

&lt;p&gt;You can also follow us on Twitter: &lt;a href=&#34;https://twitter.com/waziup&#34;&gt;@waziup&lt;/a&gt;
You can also follow us on Facebook: &lt;a href=&#34;https://facebook.com/waziup&#34;&gt;waziup&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
  &lt;p class=&#34;admonition-title&#34;&gt;What next?&lt;/p&gt;
  &lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./documentation/installation/hello-world&#34;&gt;Try Waziup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn &lt;a href=&#34;./documentation/how-Waziup-works/architecture-and-components&#34;&gt;how Waziup works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get your teeth into the &lt;a href=&#34;./documentation&#34;&gt;Waziup documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>IoT Challenge Fish Farming</title>
      <link>/resources/iot-challenge/enddevice</link>
      <pubDate>Mon, 16 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>/resources/iot-challenge/enddevice</guid>
      <description>

&lt;h2 id=&#34;end-node-device&#34;&gt;End node device&lt;/h2&gt;

&lt;p&gt;Our team have already start the project for several weeks.
 Now we have the first version of our device (gateway and end device node). In this article I present the end device node with the material used, the electronic assembly and the software part.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;electronic-part&#34;&gt;Electronic part&lt;/h2&gt;

&lt;p&gt;The end device (sensor node) is a buoy containing a box with the electronic assembly.
This device gather information about water (temperature, PH and dissolved oxygen) and send it to the IoT gateway through LoRa connection.&lt;/p&gt;

&lt;p&gt;As it cannot be connect to an electrical outlet, the device needs to have his own power supply to operate.
We decide to add a battery and a solar panel wich is fixed on the top of the buoy.&lt;/p&gt;

&lt;p&gt;For the microcontroller we use an arduino Pro Mini in his 3.3V version. This choice has been made for the low power comsuption of the Pro Mini, his small size and the ease of development on it (Arduino).

&lt;figure &gt;
    
        &lt;img src=&#34;./images/iot-challenge/20161118_164330.jpg&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;One of the challenges in this isolated rural areas was the necessity to work over a long distance and poor infrastructure. Deploying IoT in this context must use long range wireless communication between device and gateway
and autonomous low cost energy devices. We decide to use the low-power wide area networks &lt;em&gt;LoRa&lt;/em&gt;. In that purpose we add a LoRa module on the node : the inAir9 module.&lt;/p&gt;

&lt;p&gt;We use the sensors atlas DO oxygen, and atlas PH for dissolved oxygen and PH measurements. The two sensors come with a small circuit to precise the measure and calibrate it (Ezo PH and Ezo DO).
This two sensors are wired to the arduino via I2C bus that is a master-slave serial bus.&lt;/p&gt;

&lt;p&gt;For temperature we choose the DS28BT whom use the 1 wire bus. We also decide to add a temperature and humidity sensor into our box to detect a probable high peak of temperature or humidity which will damaged our circuit.&lt;/p&gt;

&lt;p&gt;The last thing we add to the circuit is a voltage divider to get the voltage output of the battery and so control his level of charge.&lt;/p&gt;

&lt;p&gt;After some prototype circuit assembly we choose to order a printed circuit board rather than directly solder the component together.&lt;/p&gt;

&lt;p&gt;Below we have the circuit schema and the Pcb schema.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;./images/iot-challenge/circuit.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Circuit Schema&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;./images/iot-challenge/pcb.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;PCB Schema&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;During the time receiving our circuit board, we build the buoy. It is composed of a watertight box, polystyrene float and slabs of plexigas to bound the overall.
The float is blocked into two slabs of plexiglas and the box is screwed to one slab.
A rod of plastic has also been added under the buoy to attached the sensors on it. So the sensors will be fully submerged under 30 cm of water.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;./images/iot-challenge/box_polystyrene.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;And few days later we received our printed circuit board and start soldering the components.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;./images/iot-challenge/20170116_170718.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;PCB Schema&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;After soldering, cutting and drilling this is our final box.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;./images/iot-challenge/final_box.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Final Box&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;hr /&gt;

&lt;h2 id=&#34;software-part&#34;&gt;Software part&lt;/h2&gt;

&lt;h3 id=&#34;library-used&#34;&gt;Library Used&lt;/h3&gt;

&lt;p&gt;To communicate via I2C bus between PH sensor, DO sensor and the Arduino , we use the &lt;a href=&#34;https://www.arduino.cc/en/Reference/Wire&#34;&gt;wire&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;One of the tricky part was to handle LoRa communication with the gateway. We use this &lt;a href=&#34;https://github.com/CongducPham/LowCostLoRaGw&#34;&gt;LoRa library&lt;/a&gt; which greatly facilitated the work. This library is developed by Congduc Pham who is also member of the Waziup Project.&lt;/p&gt;

&lt;h3 id=&#34;power-save&#34;&gt;Power save&lt;/h3&gt;

&lt;p&gt;One of the biggest constraint we face is the necessity to save power.
So we decide to get data from sensor at a rate of about 2 reads by hour. The rest of the time the microcontroller and the sensors need to be in a kind of &amp;ldquo;sleep mode&amp;rdquo;. However we choose to not using the sleep mode avalaible on the sensors (PH and DO) which still consume a little.
 We just cut off the supply when needed.&lt;/p&gt;

&lt;p&gt;On the arduino the sleep mode is assisted by interrupts, without them just a reset can wake the Arduino up.
In our case we use the watchdog timer interrupt to handle the sleep mode.
The watch dog timer is a small timer that force a full system restart if it not receive an &amp;ldquo;ok&amp;rdquo; signal from the microcontroller. The advantage of this timer is
that it&amp;rsquo;s always runing even when the system is entirely put in sleep mode. So it&amp;rsquo;s a good way to control and wake up the system periodically.&lt;/p&gt;

&lt;h3 id=&#34;system-failure&#34;&gt;System failure&lt;/h3&gt;

&lt;p&gt;We also use the watchdog timer in his main purpose : detect and recover from computer malfunction. In case of unstable loops the watchdog wont receive an &amp;ldquo;ok&amp;rdquo; signal from the microcontroller
and so will trigger a reboot of the arduino. It prevents hardware or software failure.&lt;/p&gt;

&lt;p&gt;Unfortunately I have spent several hours debugging an annoying issue with the Arduino Pro Mini watchdog timer. I finally find out that the issue didn&amp;rsquo;t come from my code, but from the original bootloader
of my Arduino board.&lt;/p&gt;

&lt;p&gt;I simulate an infinite loop that trigger the watchdog but instead of reseting once the arduino, it blocks the bootloader into an infinite reset loop.
And so nothing works anymore on the Arduino:
I cannot upload new Sketch and cannot reset the arduino manually with the reset button. I had to disconnect the power to recover the Arduino.
The solution I used is to flash a new bootloader on the board. I took the bootloader (optiboot) of the Arduino UNO which uses the same chip (atmega328) as the arduino Pro Mini and it solves the problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IoT Challenge Fish Farming</title>
      <link>/resources/iot-challenge/</link>
      <pubDate>Mon, 16 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>/resources/iot-challenge/</guid>
      <description>

&lt;h4 id=&#34;22-12-2016&#34;&gt;22/12/2016&lt;/h4&gt;

&lt;p&gt;Welcome on the blog of the IoT project Waziup Fish Farming&lt;/p&gt;

&lt;p&gt;The team from &lt;a href=&#34;http://www.eglobalmark.com/&#34;&gt;Easy Global Market&lt;/a&gt; composed of Sabrine, Charlotte, Franck and me Benjamin are currently working
 on Waziup Project and more precisely on the MVP water part of the project . We decide to take part in the Eclipse IoT Challenge 3.0 with this MVP. This blog will present you our project.&lt;/p&gt;

&lt;h3 id=&#34;new-articles&#34;&gt;New articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./resources/iot-challenge/overall/&#34;&gt;Project overall&lt;/a&gt; (22/12/2016)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./resources/iot-challenge/endDevice/&#34;&gt;Sensor node description&lt;/a&gt; (16/01/2017)&lt;/li&gt;
&lt;li&gt;Gateway description&lt;/li&gt;
&lt;li&gt;Cloud description&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;description-of-the-project&#34;&gt;Description of the project&lt;/h2&gt;

&lt;p&gt;The goal of the project is to give information to fish farmers located in low income countries about the quality of water in their ponds and support decisions making. From information gathered in the literature, the relevant information for fish ponds monitoring are: water temperature, dissolved oxygen, PH, alkalinity, ammonia, total dissolved solids, carbon dioxide. However, covering all these parameters is highly costly whereas no measures are currently made in the targeted African pond. For our first prototype, we will thus just retrieve temperature, dissolved oxygen and PH and target a trial in a fish farm in Africa, Ghana.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IoT Challenge Fish Farming</title>
      <link>/resources/iot-challenge/overall</link>
      <pubDate>Mon, 16 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>/resources/iot-challenge/overall</guid>
      <description>

&lt;h2 id=&#34;description-of-the-project&#34;&gt;Description of the project&lt;/h2&gt;

&lt;p&gt;The goal of the project is to give information to fish farmers located in low income countries about the quality of water in their ponds and support decisions making. From information gathered in the literature, the relevant information for fish ponds monitoring are: water temperature, dissolved oxygen, PH, alkalinity, ammonia, total dissolved solids, carbon dioxide. However, covering all these parameters is highly costly whereas no measures are currently made in the targeted African pond. For our first prototype, we will thus just retrieve temperature, dissolved oxygen and PH and target a trial in a fish farm in Africa, Ghana.&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;

&lt;p&gt;Our solution is divided into 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A buoy equipped with sensors for water quality and system monitoring as well as a renewable energy harvester and LoRa based connectivity to the gateway&lt;/li&gt;
&lt;li&gt;A smart gateway to collect, pre-process and securely send data to the cloud . Advanced functionalities related to device management and cloud disconnect support with local application delivery are planned to be added in a second round.&lt;/li&gt;
&lt;li&gt;A cloud to process, store and provide access to the data through web interfaces or mobile applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The device electronic with the sensors will be attached to a floating buoy and placed into a pond. The device will be powered by solar energy with a solar panel on top of the buoy. The device will gather the information needed and send it to the IoT gateway.
 Initial discussions took place with the African fish farmer (cat fish farming) to discuss the buoy design.&lt;/p&gt;

&lt;p&gt;The gateway ensures the connectivity between the sensors and the cloud. It pre-process the data, store it in a local database and send it to the cloud. Several options are available for security among which authentication key and data encryption.&lt;/p&gt;

&lt;p&gt;The cloud is composed of an IoT broker and a storage manager. The Iot broker provides pub/sub mechanisms to manage (receive and provide) information. It also provide a messaging system based on subscription. The storage manager of the cloud is for store and retrieve data. The cloud will also provide an API to get an access to the data.
At the end the services provided to the clients will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data visualisation and exploration on an internet interface&lt;/li&gt;
&lt;li&gt;The send of a sms or voicecall when a data goes beyond user defined thresholds. Mobile application is also an option but smartphone penetration is still low on the end users side.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This services will help the farmer to maintain his pond. It will help him to know when to treat the water, to change the water level or to feed the fish. The improvement of water quality will increase the productivity of the farm by reducing the fish death rate and provide optimal growth condition for the fishes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Us</title>
      <link>/about</link>
      <pubDate>Fri, 28 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>/about</guid>
      <description>

&lt;p&gt;Waziup is&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;community&#34;&gt;Community&lt;/h2&gt;

&lt;p&gt;We encourage anyone to &lt;a href=&#34;./resources/community/&#34;&gt;join the Waziup community&lt;/a&gt; and pitch in with pull requests, bug reports and feature requests to make Waziup even more awesome.&lt;/p&gt;

&lt;h2 id=&#34;contact&#34;&gt;Contact&lt;/h2&gt;

&lt;p&gt;You can contact us &lt;a href=&#34;./contact/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Downloads</title>
      <link>/resources/downloads/</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>/resources/downloads/</guid>
      <description>&lt;p&gt;List of Waziup downloads.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>News</title>
      <link>/resources/</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>/resources/</guid>
      <description>&lt;p&gt;Index of the news&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the Waziup API</title>
      <link>/documentation/api/using-the-api</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>/documentation/api/using-the-api</guid>
      <description>&lt;p&gt;Use WAZIUP API&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>version 0.1.0</title>
      <link>/documentation/release-notes/version-0-1-0</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>/documentation/release-notes/version-0-1-0</guid>
      <description>&lt;p&gt;Release notes for Waziup 0.1.0&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
  &lt;p class=&#34;admonition-title&#34;&gt;What next?&lt;/p&gt;
  &lt;p&gt;&lt;ul&gt;
&lt;li&gt;Read all release notes on github (&lt;a href=&#34;https://github.com/waziup/platform/releases&#34;&gt;github.com/Waziup/platform - Waziup releases&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;You can &lt;a href=&#34;./documentation/installation/hello-world&#34;&gt;try out Waziup&lt;/a&gt; with our hello world app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>/documentation/installation/docker</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>/documentation/installation/docker</guid>
      <description>&lt;p&gt;WAZIUP Docker files&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>API Reference</title>
      <link>/documentation/api/api-reference</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>/documentation/api/api-reference</guid>
      <description>&lt;p&gt;WAZIUP API reference&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Architecture and components</title>
      <link>/documentation/how-waziup-works/architecture</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>/documentation/how-waziup-works/architecture</guid>
      <description>

&lt;p&gt;WAZIUP is an IoT and Cloud platform based on Kubernetes.
Let&amp;rsquo;s look inside to see how it is built.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;./images/archi.png&#34; alt=&#34;Waziup architecture&#34; /&gt;&lt;/center&gt;
&lt;center&gt; &lt;em&gt;Waziup architecture&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Waziup have four functional domains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application platform,&lt;/li&gt;
&lt;li&gt;IoT platform,&lt;/li&gt;
&lt;li&gt;Security and privacy,&lt;/li&gt;
&lt;li&gt;Stream &amp;amp; data analytic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;application-platform&#34;&gt;Application platform&lt;/h2&gt;

&lt;p&gt;Waziup allows you to develop an IoT application and deploy it in the Cloud and in the Gateway.
All you have to do is provide the source code of your application in any language, Waziup does the rest.
A rapid application development (RAD) tool can be used, such as Node-Red.&lt;/p&gt;

&lt;p&gt;The orchestrator will take care of compiling your application.
It will then deploy the application in the Cloud Execution Environment.
It will also instantiate the services needed by the application.
The last task of the orchestrator is to request the sensor and data sources connections from the IoT components.&lt;/p&gt;

&lt;h2 id=&#34;iot-platform&#34;&gt;IoT platform&lt;/h2&gt;

&lt;p&gt;The sensor discovery module is in charge of retrieving a list of sensors that matches the application need.
On the left side of the diagram, the sensor owners can register their sensors with the platform.
The sensors selected for each application will deliver their data through the IoT bridge and pre-processor.
The IoT bridge is in charge of connecting directly to the sensors though the wireless network.
The pre-processor contains the routines for pre-processing the data, such as cleaning, extrapolating, aggregating and averaging the sensors measures.&lt;/p&gt;

&lt;h2 id=&#34;stream-data-analytic&#34;&gt;Stream &amp;amp; data analytic&lt;/h2&gt;

&lt;p&gt;The data broker is in charge of collecting and distributing the data from the sensors to the applications.
Historical data can be stored using the Storage manager.
External data sources such as Internet APIs can also be connected directly to the data broker.
Furthermore data analytics and visualizations are performed using the dedicated component.&lt;/p&gt;

&lt;h2 id=&#34;security-and-privacy&#34;&gt;Security and privacy&lt;/h2&gt;

&lt;p&gt;The Security and Privacy domain contains three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Identity Manager,&lt;/li&gt;
&lt;li&gt;the Authorization Manager,&lt;/li&gt;
&lt;li&gt;the Privacy Manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one is in charge of providing the identification, the roles and the connections of the users.
The Authorization Manager provides the access policy for each of the WAZIUP resources.
Finally the Privacy Manager provides services for the privacy of communication and also the anonymization of data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CLI reference</title>
      <link>/documentation/cli/cli-reference</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>/documentation/cli/cli-reference</guid>
      <description>&lt;p&gt;WAZIUP CLI Reference&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cattle management</title>
      <link>/documentation/mvps/cattle</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>/documentation/mvps/cattle</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Discover here how to build a collar to track cattles&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cattle Rustling is a recurrent phenomenon causing many problems to farmers in Africa.
In order to prevent the cattle rustling in Africa, WAZIUP proposed a prototype based around recent technological advances, specifically LoRa.
This prototype lies on a built-in low-cost LoRa IoT platform that consist of a single low-cost (LoRa) gateway with post-processing abilities, communicating with low-cost (LoRa) end-devices, and back-ended with an IoT cloud platform.&lt;/p&gt;

&lt;h1 id=&#34;principle&#34;&gt;Principle&lt;/h1&gt;

&lt;p&gt;The prototype is based on LoRa network with a single hop communication where cow are assimilated as end-nodes that periodically send data to a LoRa gateway.
The gateway sends informations related to cows situation to farmer through WAZIUP cloud platform if internet connectivity is available, or directly to the farmer’s smartphone or tablet via WiFi or Bluetooth otherwise.
A designed collar integrating our built-in LoRa end-device is fixed around the cow’s neck.
This collar incorporates a beacon system that will raise an alarm in the case a risk is observed.&lt;/p&gt;

&lt;h2 id=&#34;designed-collar&#34;&gt;Designed collar&lt;/h2&gt;

&lt;p&gt;The idea of collar may not be the major innovation in building this prototype.
However, the vast majority of designed collars for cattle management do not fit well with what is expected in the context of cattle rustling in Africa.
This is due to several reasons, and the most important one is that they are easily removable and thieves can cut the collar without farmer’s awareness.
To overcome this problem we design the collar so that when cut or removed, farmer will be informed.
We first choose a robust belt and more importantly, we passed the alimentation wire of the LoRa end-device around the neck with the belt (Fig 2b).
A beacon message is sent to the gateway when the male connector (MC) and the female connector (FC) of the alimentation wire are connected.
When the gateway receives the beacon message this means everything is fine with the collar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./documentation/mvps/cattle_images/collar.png&#34; alt=&#34;collar&#34; /&gt;
&lt;img src=&#34;./documentation/mvps/cattle_images/strap.png&#34; alt=&#34;strap&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;beacon-system&#34;&gt;Beacon system&lt;/h2&gt;

&lt;p&gt;A beacon message is sent by end-devices to the gateway when theye MC is connected to the FC.
The beacon message is a counter maned BC (Beacon Counter) that takes value between 0 to 65536.
The BC stars to 0, increases by 1 at each beacon, returns to 0 after 65536 beacons.
The end-device is designed to send, when powered on, a beacon message every 10 min.
The LoRa gateway stores the received beacon message and process it in order to detect whether an alarm should be raised or not.
The processing result can be sent to the WAZIUP cloud if internet connectivity is available or directly to the farmer’s smartphone or tablet (via bluetooth or wifi) if not.
The reception of a beacon message means that the end-device which sends it is in the range of the gateway.
If cows are out of range, or the collar is disconnected or damaged, an alarm will be raised.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./documentation/mvps/cattle_images/moo.png&#34; alt=&#34;Moo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;The Prototypes are deployed in CIMEL (Mbakhana, 6 km far from UGB) in Senegal.
A LoRa gateway will be placed up to the UGB library building (height of 90 meters) and some collars with LoRa end-devices putted around the neck of some identified animal.
A collar will actively and periodically send “beacons” to the gateway.&lt;/p&gt;

&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;LoRa Gateway&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry PI (1B/1B+/2B/3B)&lt;/li&gt;
&lt;li&gt;LoRa radio module : Our prototype is tested and it can work with different LoRa radio module : Libelium SX1272 LoRa, the HopeRF RFM92W/95W, the Modtronix inAir9/9B and the NiceRF SX1276.&lt;/li&gt;
&lt;li&gt;Antenna : Long antenna from Scan Antenna running on 824-894 MHz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;./documentation/mvps/cattle_images/antenna.png&#34; alt=&#34;Antenna&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LoRa End-devices&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Arduino Nano or Pro Mini : To reduice the size of the collar the end-devices must be small, then we have to use very small microcontrolleurs like arduino nano or pro mini.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;./documentation/mvps/cattle_images/nano.png&#34; alt=&#34;Nano&#34; /&gt;
&lt;img src=&#34;./documentation/mvps/cattle_images/pro_mini.png&#34; alt=&#34;Pro Mini&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LoRa radio module + antenna&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our prototype is tested and it can work with different LoRa radio module : Libelium SX1272 LoRa, the HopeRF RFM92W/95W, the Modtronix inAir9/9B and the NiceRF SX1276.
For the end-devices we use small antenna running on 868MHz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./documentation/mvps/cattle_images/antennas.jpg&#34; alt=&#34;Antennas&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>